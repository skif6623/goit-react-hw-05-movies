{"version":3,"file":"static/js/104.a0a4ccfc.chunk.js","mappings":"2OAEaA,EAAS,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAMvB,OACE,kBAAMC,SANa,SAAAC,GACnBA,EAAEC,iBACFH,EAAME,EAAEE,OAAOC,SAASC,MAAMC,MAC/B,EAGC,WACE,kBAAOC,KAAK,QAAQC,KAAK,UACzB,mBAAQA,KAAK,SAAb,sBAGL,E,2BCXYC,EAAa,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACrBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,wBACGF,EAAMG,KAAI,SAAAC,GAAI,OACb,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAKE,IAAMC,MAAO,CAAEC,KAAMP,GAA/C,SACGG,EAAKK,kBAFDL,EAAKE,GADD,KASpB,ECVYI,EAAS,WAAO,IAAD,EAC1B,GAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOX,EAAP,KAAcY,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMpB,EAAK,UAAGmB,EAAaE,IAAI,gBAApB,QAAgC,IAE3CC,EAAAA,EAAAA,YAAU,WACR,GAAc,KAAVtB,EAAJ,CAGA,IAAMuB,EAAgB,mCAAG,WAAMvB,GAAN,wFACFwB,EAAAA,EAAAA,IAAexB,GADb,OACjByB,EADiB,OAEvBR,EAASQ,EAAOC,SAFO,2CAAH,sDAKtBH,EAAiBvB,EANhB,CAOF,GAAE,CAACA,IAMJ,OACE,6BACE,SAACP,EAAD,CAAQC,MANK,SAAAO,GACfmB,EAA0B,KAAVnB,EAAe,CAAC,EAAI,CAAED,MAAOC,GAC9C,IAKII,GAASL,IAAS,SAACI,EAAD,CAAYC,MAAOA,MAG3C,C,uNC9BYsB,EAAU,kCACjBC,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAW,mCAAG,oGACFD,EAAAA,EAAAA,IAAA,uBAAkC,CACvDE,OAAQ,CACNC,QAASJ,KAHY,cACnBK,EADmB,yBAMlBA,EAASC,MANS,2CAAH,qDASXC,EAAe,mCAAG,WAAMxB,GAAN,uFACNkB,EAAAA,EAAAA,IAAA,gBAAmBlB,EAAnB,KAA0B,CAC/CoB,OAAQ,CACNC,QAASJ,KAHgB,cACvBK,EADuB,yBAMtBA,EAASC,MANa,2CAAH,sDASfE,EAAY,mCAAG,WAAMzB,GAAN,uFACHkB,EAAAA,EAAAA,IAAA,gBAAmBlB,EAAnB,aAAkC,CACvDoB,OAAQ,CACNC,QAASJ,KAHa,cACpBK,EADoB,yBAMnBA,EAASC,MANU,2CAAH,sDASZG,EAAc,mCAAG,WAAM1B,GAAN,uFACLkB,EAAAA,EAAAA,IAAA,gBAAmBlB,EAAnB,aAAkC,CACvDoB,OAAQ,CACNC,QAASJ,KAHe,cACtBK,EADsB,yBAMrBA,EAASC,MANY,2CAAH,sDASdV,EAAc,mCAAG,WAAMxB,GAAN,uFACL6B,EAAAA,EAAAA,IAAA,gBAA2B,CAChDE,OAAQ,CACN/B,MAAAA,EACAgC,QAASJ,KAJe,cACtBK,EADsB,yBAOrBA,EAASC,MAPY,2CAAH,qD","sources":["components/Search/Search.jsx","components/SearchList/SearchList.jsx","pages/Movies/Movies.jsx","servise/tmdbAPI.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nexport const Search = ({ onSet }) => {\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSet(e.target.elements.query.value);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input name=\"query\" type=\"text\" />\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n\nSearch.propTypes = {\n  onSet: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport const SearchList = ({ films }) => {\n  const location = useLocation();\n  return (\n    <ul>\n      {films.map(film => (\n        <li key={film.id}>\n          <Link to={`/movies/${film.id}`} state={{ from: location }}>\n            {film.original_title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nSearchList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      original_title: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { useSearchParams } from 'react-router-dom';\nimport { Search } from 'components/Search/Search';\nimport { useEffect, useState } from 'react';\nimport { getSearchMovie } from 'servise/tmdbAPI';\nimport { SearchList } from 'components/SearchList/SearchList';\n\nexport const Movies = () => {\n  const [films, setFilms] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n    const fetchSearchMovie = async query => {\n      const movies = await getSearchMovie(query);\n      setFilms(movies.results);\n    };\n\n    fetchSearchMovie(query);\n  }, [query]);\n\n  const setQuery = value => {\n    setSearchParams(value === '' ? {} : { query: value });\n  };\n\n  return (\n    <main>\n      <Search onSet={setQuery} />\n      {films && query && <SearchList films={films} />}\n    </main>\n  );\n};\n\n","// https://api.themoviedb.org/3/movie/550?api_key=7770a554235a470dd8487676c4d97407\nimport axios from 'axios';\n\nexport const IMG_URL = 'https://image.tmdb.org/t/p/w500';\nconst API_KEY = '7770a554235a470dd8487676c4d97407';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const getTrending = async () => {\n  const response = await axios.get(`trending/movie/week?`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const getMovieDetails = async id => {\n  const response = await axios.get(`movie/${id}?`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const getMovieCast = async id => {\n  const response = await axios.get(`movie/${id}/credits?`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const getMovieReview = async id => {\n  const response = await axios.get(`movie/${id}/reviews?`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const getSearchMovie = async query => {\n  const response = await axios.get(`search/movie?`, {\n    params: {\n      query,\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n"],"names":["Search","onSet","onSubmit","e","preventDefault","target","elements","query","value","name","type","SearchList","films","location","useLocation","map","film","to","id","state","from","original_title","Movies","useState","setFilms","useSearchParams","searchParams","setSearchParams","get","useEffect","fetchSearchMovie","getSearchMovie","movies","results","IMG_URL","API_KEY","axios","getTrending","params","api_key","response","data","getMovieDetails","getMovieCast","getMovieReview"],"sourceRoot":""}